import { v4 as uuidv4 } from 'uuid';
import { Vulnerability } from './security-scanner';

interface VulnerabilityPattern {
  pattern: RegExp;
  severity: 'critical' | 'high' | 'medium' | 'low' | 'info';
  title: string;
  description: string;
  remediation: string;
  cwe?: string;
  owasp?: string;
}

const XSS_PATTERNS: VulnerabilityPattern[] = [
  {
    pattern: /dangerouslySetInnerHTML\s*=\s*{\s*{\s*__html:\s*[^}]+}\s*}/g,
    severity: 'high',
    title: 'Cross-Site Scripting (XSS)',
    description: 'Unescaped user input in HTML output',
    remediation: 'Use proper HTML escaping or React text content',
    cwe: 'CWE-79',
    owasp: 'A03:2021',
  },
  {
    pattern: /innerHTML\s*=\s*[^;]+/g,
    severity: 'high',
    title: 'Cross-Site Scripting (XSS)',
    description: 'Direct innerHTML assignment with potential user input',
    remediation: 'Use textContent or proper escaping',
    cwe: 'CWE-79',
    owasp: 'A03:2021',
  },
  {
    pattern: /document\.write\s*\([^)]+\)/g,
    severity: 'medium',
    title: 'Cross-Site Scripting (XSS)',
    description: 'document.write usage with potential user input',
    remediation: 'Use modern DOM manipulation methods',
    cwe: 'CWE-79',
    owasp: 'A03:2021',
  },
  {
    pattern: /eval\s*\([^)]+\)/g,
    severity: 'critical',
    title: 'Code Injection via eval()',
    description: 'eval() usage with potential user input',
    remediation: 'Avoid eval() and use safer alternatives',
    cwe: 'CWE-94',
    owasp: 'A03:2021',
  },
];

const SQL_INJECTION_PATTERNS: VulnerabilityPattern[] = [
  {
    pattern: /query\s*[=:]\s*[`"'].*\$\{[^}]+\}.*[`"']/g,
    severity: 'critical',
    title: 'SQL Injection',
    description: 'Direct string concatenation in SQL query',
    remediation: 'Use parameterized queries',
    cwe: 'CWE-89',
    owasp: 'A03:2021',
  },
  {
    pattern: /query\s*\([`"'].*\+.*[`"']\)/g,
    severity: 'critical',
    title: 'SQL Injection',
    description: 'String concatenation in SQL query',
    remediation: 'Use parameterized queries or prepared statements',
    cwe: 'CWE-89',
    owasp: 'A03:2021',
  },
  {
    pattern: /execute\s*\([`"'].*\$\{[^}]+\}.*[`"']\)/g,
    severity: 'critical',
    title: 'SQL Injection',
    description: 'Dynamic SQL execution with user input',
    remediation: 'Use parameterized queries',
    cwe: 'CWE-89',
    owasp: 'A03:2021',
  },
];

const INSECURE_AUTH_PATTERNS: VulnerabilityPattern[] = [
  {
    pattern: /password\s*[=:]\s*["'][^"']+["']/g,
    severity: 'high',
    title: 'Insecure Authentication',
    description: 'Hardcoded password in source code',
    remediation: 'Use environment variables or secure credential management',
    cwe: 'CWE-798',
    owasp: 'A07:2021',
  },
  {
    pattern: /token\s*===?\s*["']admin\d*["']/g,
    severity: 'high',
    title: 'Insecure Authentication',
    description: 'Weak authentication implementation',
    remediation: 'Implement proper JWT or OAuth authentication',
    cwe: 'CWE-287',
    owasp: 'A07:2021',
  },
  {
    pattern: /if\s*\([^)]*headers\.(token|authorization)\s*===?\s*["'][^"']+["']/g,
    severity: 'high',
    title: 'Insecure Authentication',
    description: 'Hardcoded authentication token',
    remediation: 'Use proper token validation',
    cwe: 'CWE-287',
    owasp: 'A07:2021',
  },
];

const HARDCODED_SECRET_PATTERNS: VulnerabilityPattern[] = [
  {
    pattern: /API_KEY\s*=\s*["'][A-Za-z0-9_\-]{20,}["']/g,
    severity: 'critical',
    title: 'Hardcoded Secret',
    description: 'API key found in source code',
    remediation: 'Use environment variables for secrets',
    cwe: 'CWE-798',
    owasp: 'A02:2021',
  },
  {
    pattern: /sk_live_[A-Za-z0-9]{24,}/g,
    severity: 'critical',
    title: 'Hardcoded Secret',
    description: 'Stripe secret key found in source code',
    remediation: 'Use environment variables for API keys',
    cwe: 'CWE-798',
    owasp: 'A02:2021',
  },
  {
    pattern: /bearer\s+[A-Za-z0-9\-._~+/]+=*/gi,
    severity: 'high',
    title: 'Hardcoded Bearer Token',
    description: 'Bearer token found in source code',
    remediation: 'Use secure token management',
    cwe: 'CWE-798',
    owasp: 'A02:2021',
  },
  {
    pattern: /private_key\s*[=:]\s*["'][^"']+["']/gi,
    severity: 'critical',
    title: 'Hardcoded Private Key',
    description: 'Private key found in source code',
    remediation: 'Store private keys securely, not in code',
    cwe: 'CWE-798',
    owasp: 'A02:2021',
  },
];

const CSRF_PATTERNS: VulnerabilityPattern[] = [
  {
    pattern: /router\.(post|put|delete|patch)\s*\(["'][^"']+["']\s*,\s*async[^{]*{/g,
    severity: 'medium',
    title: 'Cross-Site Request Forgery (CSRF)',
    description: 'Missing CSRF token validation',
    remediation: 'Implement CSRF token validation',
    cwe: 'CWE-352',
    owasp: 'A01:2021',
  },
  {
    pattern: /app\.(post|put|delete|patch)\s*\(["'][^"']+["']\s*,\s*\([^)]*\)\s*=>/g,
    severity: 'medium',
    title: 'Cross-Site Request Forgery (CSRF)',
    description: 'State-changing endpoint without CSRF protection',
    remediation: 'Add CSRF token validation middleware',
    cwe: 'CWE-352',
    owasp: 'A01:2021',
  },
];

const PATH_TRAVERSAL_PATTERNS: VulnerabilityPattern[] = [
  {
    pattern: /readFile\s*\([^,)]*\+[^,)]*\)/g,
    severity: 'high',
    title: 'Path Traversal',
    description: 'File path concatenation without validation',
    remediation: 'Validate and sanitize file paths',
    cwe: 'CWE-22',
    owasp: 'A01:2021',
  },
  {
    pattern: /path\.join\s*\([^)]*req\.(params|query|body)[^)]*\)/g,
    severity: 'high',
    title: 'Path Traversal',
    description: 'User input in file path',
    remediation: 'Validate file paths and use allowlists',
    cwe: 'CWE-22',
    owasp: 'A01:2021',
  },
];

export function detectVulnerability(
  content: string,
  filePath: string,
  type: 'xss' | 'sql-injection' | 'csrf' | 'insecure-auth' | 'hardcoded-secret' | 'path-traversal'
): Vulnerability[] {
  const vulnerabilities: Vulnerability[] = [];
  let patterns: VulnerabilityPattern[];

  switch (type) {
    case 'xss':
      patterns = XSS_PATTERNS;
      break;
    case 'sql-injection':
      patterns = SQL_INJECTION_PATTERNS;
      break;
    case 'insecure-auth':
      patterns = INSECURE_AUTH_PATTERNS;
      break;
    case 'hardcoded-secret':
      patterns = HARDCODED_SECRET_PATTERNS;
      break;
    case 'csrf':
      patterns = CSRF_PATTERNS;
      break;
    case 'path-traversal':
      patterns = PATH_TRAVERSAL_PATTERNS;
      break;
    default:
      return [];
  }

  const lines = content.split('\n');

  for (const pattern of patterns) {
    let match;
    const regex = new RegExp(pattern.pattern);
    
    while ((match = regex.exec(content)) !== null) {
      const position = getLineAndColumn(content, match.index);
      const codeSample = match[0];
      
      vulnerabilities.push({
        id: `${type}-${uuidv4()}`,
        type,
        severity: pattern.severity,
        title: pattern.title,
        description: pattern.description,
        file: filePath,
        line: position.line,
        column: position.column,
        code: codeSample.trim(),
        remediation: pattern.remediation,
        cwe: pattern.cwe,
        owasp: pattern.owasp,
      });
    }
  }

  return vulnerabilities;
}

function getLineAndColumn(content: string, index: number): { line: number; column: number } {
  const lines = content.substring(0, index).split('\n');
  const line = lines.length;
  const column = lines[lines.length - 1].length + 1;
  return { line, column };
}

export function classifySeverity(
  type: string,
  context?: any
): 'critical' | 'high' | 'medium' | 'low' | 'info' {
  // Default severity mappings
  const severityMap: Record<string, 'critical' | 'high' | 'medium' | 'low' | 'info'> = {
    'sql-injection': 'critical',
    'hardcoded-secret': 'critical',
    'xss': 'high',
    'insecure-auth': 'high',
    'path-traversal': 'high',
    'csrf': 'medium',
  };

  return severityMap[type] || 'info';
}